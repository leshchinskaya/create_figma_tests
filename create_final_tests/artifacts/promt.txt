Пожалуйста, на основании артефактов ниже, сгенерируй тесты на фичу Поиск

### 1. Бизнес-требования (req_showcase)
Описание логики с точными названиями фич, секций и экранов из Figma.
Содержимое файла `req_showcase.md`:
```markdown
{{REQ_SHOWCASE_CONTENT}}
```

### 2. Swagger-спецификация (swagger)
Описание API, моделей и параметров запросов.
Содержимое файла `swagger.yaml`:
```yaml
{{SWAGGER_CONTENT}}
```

### 3. Тесты на дизайн (tests_from_figma)
Краткие сценарии с Summary, содержащие названия секций/экранов из Figma.
Содержимое файла `tests_from_figma.csv`:
```csv
{{TESTS_FROM_FIGMA_CONTENT}}
```

Правила:
* Обязательно сохрани наименования файлов, которые прикреплены к тестам
* Обязательно сохрани ссылки на figma, которые прикреплены к тестам

Сгенерируй единый JSON-файл с массивом объектов.
Каждый объект обязан соответствовать схеме TestCase (см. ниже) и описывать один тест.
Порядок полей внутри объекта не важен, но все поля из секции required должны присутствовать.
Не оборачивай результат в Markdown, выводи чистый JSON.

```yaml
{{JSON_SCHEME_CONTENT}}
```

Общие правила:
* Используй русский язык кроме непереводимых слов
* summary ≤100 символов, императивно. В конце не ставь точку
* description: контекст, ID требований, часть требований, которые покрываются данной проверкой, ссылка на Figma, наименование файла из tests_from_figma. Каждый пункт на отдельной строке списком.
* priority: Blocker|Critical|Normal|Minor.
* labels: (Functional, Regression, Performance, StatePath, Boundary, DecisionTable, ErrorGuessing и т.д.). *Обязательно слитно*
* steps: action и result должны быть непустыми строками
* estimate — integer, минуты
* testCaseType: component
* testRepositoryPath: имя фичи из документации в нижнем регистре
todo папки по принципу экранов

ВАЖНО:
* Внимательно следи за синтаксисом, результатом должен быть валидный массив json объектов в соответствии со схемой
* Если внутри json нужны кавычки (например название кнопки), используй одиночные кавычки (')
* Вместо `` (backticks) используй {{<text>}}, но будь внимателен с дальнейшими фигурными скобками
* Для блоков кода (если нужны) используй {code}<code>{code} конструкцию, но будь внимателен с дальнейшими фигурными скобками

Структура проверок:
1. Отправка запроса:
   * Позитивные проверки (корректный запрос - успешный ответ - отображение данных согласно ТЗ). Добавляй наименование запроса и моделей из Swagger
   * Ошибка/таймаут/offline в одном сценарии (негативные проверки + отсутствие сети). Добавляй наименование запроса и моделей из Swagger
   todo больше ошибок (или как-то взять специфичные типа 401)
        иногда не пишет вообще ошибки (не конкретно)
   * Примеры названий:
     * Фича. Экран/шторка/TUP - запрос
     * Фича – запрос (для одноэкранных фич)

2. Пагинация:
   * Два сценария: успешная догрузка и ошибка/offline. Добавляй наименование запроса и моделей из Swagger
   * Названия:
     * Фича. Название экрана – пагинированный запрос
     * Фича. Название экрана – пагинированный запрос, ошибка

3. PTR:
   * Два сценария: PTR и PTR, ошибка. Добавляй наименование запроса и моделей из Swagger
   * Названия аналогично пагинации.

4. Кэш:
   * Несколько сценариев: с кэшем, без кэша, с кэшем ошибка, без кэша ошибка.
   * Названия:
     * Фича. Экран – запрос, с/без кэша
     * Фича. Экран – запрос, с/без кэша, ошибка

5. Логика стеков экранов:
   * Сохранение/очистка данных при переходе/возврате.
   * Сворачивание приложения - сохранение состояния.
   * Название:
     * Фича – логика работы в стеке экранов

6. Компоновка:
   * Проверка layout в состояниях: заполненное, Empty State, Error State, No Connection.
   * Отдельно для каждого экрана/шторки/TUP.
   * Названия:
     * Фича. Экран – компоновка
     * Фича. Экран. Error State – компоновка
     * Фича. Экран. Empty State – компоновка
     * Фича. Экран. No Connection – компоновка

7. Элемент (поле, чек-бокс, радиобаттон, карусель и т.п.). Используй техники тест-дизайна:
   a) Позитивные проверки + логика работы:
   * Фича. Элемент – позитивные проверки
   * Фича. Экран/шторка. Элемент – позитивные
     b) Логика работы (например, маска, валидация, автоскролл):
   * Фича. Элемент – логика работы
     c) Негативные проверки:
   * Фича. Элемент – негативные проверки
   * Фича. Экран/шторка. Элемент – негативные


Маппинг элементов и проверок:

Дополнительно:
* Для каждого бизнес-требования ≥1 позитивный и ≥1 негативный тест.
* Точки входа фич покрываются переходами в других фичах, не дублируй.
* Не тестировать “логика работы” поля отдельно, если она уже покрыта позитивным тестом.
* Без “инициализации” и “действия с ошибкой” в названиях — используй конкретные названия операций (напр. “запрос на верификацию”, “вход по номеру телефона”).
* Раздельно тестовые шаги - строго 1 условие 1 тест 1 ОР
* Уменьшить разбивку по тестам (объединять ошибки) например проверяет компоновку хотя можно проверить в запросной/логике
* Смешивает логику и запросные проверки
* обязательно прикладывать эндпоинт с методом
* детали запросов не прикладывает - возможно нужен раздельный промптинг
* Названия сделать более железными, много выдумывает
