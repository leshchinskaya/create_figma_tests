Пожалуйста, на основании следующих артефактов:

### 1. Бизнес-требования (req_showcase)
Описание логики с точными названиями фич, секций и экранов из Figma.
Содержимое файла `req_showcase.md`:
```markdown
# Главная форма

[section\_header](#section_header)

[section\_bonuses](#section_bonuses)

[section\_search-btn](#section_search-btn)

[section\_symptoms](#section_symptoms)

[section\_ads-banners](#section_ads-banners)

[section\_collection](#section_collection)

[section\_tab-bar](#heading=)

[Логика главной формы](#heading=)

[Доступные действия пользователя](#heading=)

[Обработка ошибок](#heading=)

# **section\_header** {#section_header}

[Figma](https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=170-3706&t=49dFYTLraNZ5W90k-4)

## **Поведение**

Отображается всем пользователям. При неавторизованном пользователе — отображается блок с CTA “Войти / Зарегистрироваться”.  
При авторизованном пользователе — отображаются аватар, уведомления, блок заказов.  
Секция инициирует отображение других секций через входной параметр isAuthorized.

## **Входные параметры**

id: string: идентификатор пользователя  
avatarUrl: string: URL изображения аватара  
deliveryAddress.street: string: улица доставки  
deliveryAddress.house: string: дом доставки  
deliveryDate: date: дата доставки  
hasUnreadNotifications: boolean: наличие непрочитанных уведомлений

## **Состояния**

Актуализация, Не авторизован, Доступен (авторизован)

## **Действия и методы**

\- Тап по аватару → \`Открыть хедер\`  
\- Тап по иконке уведомлений → \`Открыть уведомления\`  
\- Тап по блоку доставки → \`Открыть доставки\`  
\- Тап по кнопке “Войти / Зарегистрироваться” → \`Авторизоваться\`

## **Обработка ошибок**

Ошибка получения состояния авторизации — секция переходит в состояние 'Не авторизован'.  
Ошибка сети — отображается общий error state главного экрана.

# **section\_bonuses** {#section_bonuses}

[Figma](https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=193-4876&t=49dFYTLraNZ5W90k-4)

## **Входные параметры**

bonusAmount: number \- общее количество бонусов  
bonusExpirationDate \- date: дата ближайшего сгорания  
bonusExpirationTotal \- number: количество бонусов к сгоранию  
qrCodeUrl: string \- URL QR-кода  
isAuthorized: boolean \- признак авторизации пользователя

## **Поведение**

Отображается только авторизованным пользователям. Использует кэшированные данные бонусного счёта. Авторизованному пользователю отображаются количество баллов и QR-код. Если заданы bonusExpirationTotal и bonusExpirationDate, то отображаются количество сгорающих бонусов и дата сгорания.

## **Состояния**

Не отображается, Доступен, Доступен (ноль)

## **Действия и методы**

\- Тап по блоку бонусов → \`Смотреть бонусы\` (если есть бонусы)

## **Обработка ошибок**

Ошибка получения бонусов или QR-кода — отображается 0 бонусов, QR-код скрыт.  
Ошибка сети — отображается информационный блок без бонусов и QR.

# **section\_search-btn** {#section_search-btn}

[Figma](https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=11-3371&t=49dFYTLraNZ5W90k-4)

## **Поведение**

Отображается всем пользователям. Поиск работает как кнопка, по тапу открывается модальный экран с активной строкой и клавиатурой.

## **Входные параметры**

Нет

## **Состояния**

Доступен

## **Действия и методы**

\- Тап по строке поиска → \`Открыть поиск\`

## **Обработка ошибок**

Ошибка отправки запроса — отображается сообщение об ошибке поиска.

# **section\_symptoms** {#section_symptoms}

[Figma](https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=24-3576&t=49dFYTLraNZ5W90k-4)

## **Поведение**

Отображается всем пользователям. 

Если ни один чипс не пришел, секция не отображается.

Использует переданный массив тэгов и отображает только первые maxVisible.

## **Входные параметры**

tags: Array\<{ id, name, iconName, linkToCategory }\>  
maxVisible?: number \- максимальное количество отображаемых тэгов  
scroll: boolean \- если true, то горизонтальный скролл и тэги отображаются двумя строками, если false \- все тэги отображаются в кучу

## **Состояния**

Доступен

## **Действия и методы**

\- Тап по тэгу симптома → \`Перейти\` в категорию каталога по ссылке linkToCategory

## **Особенности UX / UI**

Сортировка сохраняет порядок входного массива. Иконка используется по имени iconName.

## **Обработка ошибок**

Ошибка загрузки массива тэгов — секция не отображается.

# **section\_ads-banners** {#section_ads-banners}

[Figma](https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=5-3285&t=49dFYTLraNZ5W90k-4)

## **Входные параметры**

* \- \`image.url\` (string): URL изображения баннера  
* \- \`promo\_token\` (string): идентификатор промо-акции  
* \- \`url\` (string): ссылка перехода

banners: Array\<{ id, name, imageUrl, url }\>, autoScroll?: boolean, scrollInterval?: number

## **Поведение**

Горизонтальный слайдер с баннерами. Поддерживает автопрокрутку и обработку переходов по ссылкам. Количество баннеров определяется количеством элементов массива banners.

Последний баннер циклически переходит к первому.

## **Состояния**

Доступен

## **Действия и методы**

\- Тап по баннеру → переход по ссылке  
\- Свайп влево → \`SwipeLeft\`  
\- Свайп вправо → \`SwipeRight\`  
\- Автоматическая прокрутка → \`AutoScrollNext\`

## **Обработка ошибок**

Ошибка загрузки баннеров — секция не отображается

# **section\_collection** {#section_collection}

[Figma](https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=3-3432&t=49dFYTLraNZ5W90k-4)

## **Поведение**

Отображает активные категории с иконками, цветом и названием. Поддерживает ограничение maxVisible.

## **Входные параметры**

* \- \`name\` (string): имя категории  
* \- \`iconMobile\` (string): URL иконки  
* \- \`colorMobile\` (string): цвет фона  
* \- \`active\` (boolean): флаг отображения

categories: Array\<Category\>, maxVisible?: number

## **Состояния**

Доступен

## **Действия и методы**

\- Тап по категории без подкатегорий → \`Перейти\`  
\- Тап по категории с подкатегориями → \`Перейти в подкатегории\`

## **Особенности UX / UI**

Название категории отображается максимум в две строки.

## **Обработка ошибок**

Отсутствие входных данных — секция не отображается

# **section\_tab-bar**

[Figma](https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-16378&t=49dFYTLraNZ5W90k-4)

## **Поведение**

Основная навигация по разделам. Отображает кнопки "Каталог", "Избранное", "Корзина", "Главная".

## **Входные параметры**

isAuthorized: boolean \- признак авторизации пользователя  
 cartCount: number \- количество товаров в корзине  
activeTab: number \- код активного таба

## **Состояния**

Доступен

## **Действия и методы**

\- Тап на “Каталог” → \`Перейти в каталог\`  
\- Тап на “Избранное” (авторизован) → \`Перейти к избранному\`  
\- Тап на “Избранное” (неавторизован) → BS \`Регистрация\`  
\- Тап на “Корзина” → \`Перейти в корзину\`

## **Особенности UX / UI**

Бейдж счётчика корзины отображается при cartCount \> 0\. Активный пункт выделен визуально.

## **Секция: Меню — подвал**

\- Ошибка получения счётчика корзины — счётчик скрыт.

# **Логика главной формы**

1\. section\_header отображается первым. Его состояние определяет авторизацию пользователя.  
2\. section\_bonuses отображается только если пользователь авторизован.  
3\. Остальные секции отображаются всегда (section\_search-btn, section\_symptoms, section\_ads-banners, section\_collection, section\_tab-bar).  
4\. После авторизации повторно активируются секции, зависящие от авторизации.


```

### 2. Swagger-спецификация (swagger)
Описание API, моделей и параметров запросов.
Содержимое файла `swagger.yaml`:
```yaml
openapi: 3.1.0
info:
  title: Home Page API
  version: 1.0.1
tags:
  - name: Главный экран
    description: API для получения данных для главного экрана
  - name: Товары
    description: API для операций с товарами
  - name: Корзина
    description: API для операций с корзиной
paths:
  /user/profile:
    get:
      summary: Получить профиль пользователя
      tags:
        - Главный экран
      responses:
        '200':
          description: Информация о профиле
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /user/bonuses:
    get:
      summary: Получить информацию о бонусах
      tags:
        - Главный экран
      responses:
        '200':
          description: Данные о бонусах
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bonuses'

  /recommendations/symptoms:
    get:
      summary: Получить тэги по симптомам
      tags:
        - Главный экран
      responses:
        '200':
          description: Список тэгов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SymptomTag'

  /banners:
    get:
      summary: Получить баннеры главной страницы
      tags:
        - Главный экран
      responses:
        '200':
          description: Список баннеров
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Banner'

  /recommendations/categories:
    get:
      summary: Получить блоки с рекомендациями по категориям
      tags:
        - Главный экран
      parameters:
        - in: query
          name: categoryId
          schema: { type: string }
          required: false
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
          required: false
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          required: false
      responses:
        '200':
          description: Массив блоков витрин и данных по категориям
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /products/{productId}/favorite:
    put:
      summary: Поставить лайк (добавить в избранное)
      tags: [Товары]
      parameters:
        - name: productId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '204':
          description: Лайк поставлен

    delete:
      summary: Убрать лайк (удалить из избранного)
      tags: [Товары]
      parameters:
        - name: productId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '204':
          description: Лайк удалён
  
  /cart/items:
    post:
      summary: Добавить товар в корзину
      tags: [Корзина]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productId, quantity]
              properties:
                productId: { type: string }
                quantity: { type: integer, minimum: 1 }
      responses:
        '204':
          description: Товар добавлен в корзину

  /cart/items/{productId}:
    patch:
      summary: Изменить количество товара в корзине
      description: >
        Увеличивает или уменьшает количество конкретного товара в корзине.
        Если итоговое количество становится 0 или меньше — товар удаляется.
      tags: [Корзина]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: Количество, на которое изменить (может быть отрицательным)
              required: [quantity]
      responses:
        '204':
          description: Количество товара обновлено или товар удалён
        '400':
          description: Некорректное значение количества
        '404':
          description: Товар не найден в корзине

components:
  schemas:
    UserProfile:
      type: object
      properties:
        id: { type: string }
        avatarUrl: { type: string }
        deliveryAddress:
          type: object
          properties:
            street: { type: string }
            house: { type: string }
        hasUnreadNotifications: { type: boolean }

    Bonuses:
      type: object
      properties:
        total: { type: integer }
        expiring: { type: integer }
        expiresAt: { type: string, format: date }

    SymptomTag:
      type: object
      properties:
        id: { type: string }
        label: { type: string }
        emoji: { type: string }

    Banner:
      type: object
      properties:
        id: { type: string }
        imageUrl: { type: string }
        targetUrl: { type: string }

    Category:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        icon: { type: string }
        purchasedProducts: { type: array, items: { $ref: '#/components/schemas/Product' } }
        banners: { type: array, items: { $ref: '#/components/schemas/Banner' } }
        analogProducts: { type: array, items: { $ref: '#/components/schemas/Product' } }
        blogPost: { $ref: '#/components/schemas/BlogArticle' }
        watchedProducts: { type: array, items: { $ref: '#/components/schemas/Product' } }
        discountProducts: { $ref: '#/components/schemas/ProductSectionWithPagination' }

    ProductList:
      type: object
      properties:
        products:
          type: array
          items: { $ref: '#/components/schemas/Product' }

    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        oldPrice: { type: string }
        price: { type: string }
        imageUrl: { type: string }
        rating: { type: number }
        reviewsCount: { type: number }
        discountPercent: { type: number }
        isFavorite: { type: boolean }

    ProductSectionWithPagination:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          type: object
          properties:
            offset: { type: integer }
            limit: { type: integer }
            total: { type: integer }
    
    BlogArticle:
      type: object
      properties:
        id: { type: string }
        topic: { type: string }
        title: { type: string }
        subtitle: { type: string }
        previewImageUrl: { type: string }
```

### 3. Тесты на дизайн (tests_from_figma)
Краткие сценарии с Summary, содержащие названия секций/экранов из Figma.
Содержимое файла `tests_from_figma.csv`:
```csv
Issue key,Issue id,Summary,Description,Custom field (Manual Test Steps)
SURFQA-2814,365091,screen: Showcase. section__tab-bar - логика работы,"*Figma:* [section__tab-bar|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=1:20696]","[{""id"":397489,""index"":1,""fields"":{""Action"":""screen: Showcase. section__tab-bar - логика работы"",""Data"":"""",""Expected Result"":""!screen_showcase__section__tab_bar.png|width\u003d600!""},""attachments"":[],""testVersionId"":92826}]"
SURFQA-2813,365090,screen: Showcase. section__catalog - логика работы,"*Figma:* [section__catalog|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=193:19130]","[{""id"":397488,""index"":1,""fields"":{""Action"":""screen: Showcase. section__catalog - логика работы"",""Data"":"""",""Expected Result"":""!screen_showcase__03_section__catalog.png|width\u003d600!""},""attachments"":[],""testVersionId"":92825}]"
SURFQA-2812,365089,screen: Showcase. section__catalog - логика работы,"*Figma:* [section__catalog|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=193:18984]","[{""id"":397487,""index"":1,""fields"":{""Action"":""screen: Showcase. section__catalog - логика работы"",""Data"":"""",""Expected Result"":""!screen_showcase__02_section__catalog.png|width\u003d600!""},""attachments"":[],""testVersionId"":92824}]"
SURFQA-2811,365088,screen: Showcase. section__link-banner - логика работы,"*Figma:* [section__link-banner|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=5:3564]","[{""id"":397486,""index"":1,""fields"":{""Action"":""screen: Showcase. section__link-banner - логика работы"",""Data"":"""",""Expected Result"":""!screen_showcase__section__link_banner.png|width\u003d600!""},""attachments"":[],""testVersionId"":92823}]"
SURFQA-2810,365087,screen: Showcase. section__catalog - логика работы,"*Figma:* [section__catalog|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=193:17254]","[{""id"":397485,""index"":1,""fields"":{""Action"":""screen: Showcase. section__catalog - логика работы"",""Data"":"""",""Expected Result"":""!screen_showcase__section__catalog.png|width\u003d600!""},""attachments"":[],""testVersionId"":92822}]"
SURFQA-2809,365086,screen: Showcase. section__ads-banners - логика работы,"*Figma:* [section__ads-banners|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=5:3286]","[{""id"":397484,""index"":1,""fields"":{""Action"":""screen: Showcase. section__ads-banners - логика работы"",""Data"":"""",""Expected Result"":""!screen_showcase__section__ads_banners.png|width\u003d600!""},""attachments"":[],""testVersionId"":92821}]"
SURFQA-2808,365085,screen: Showcase. section__my-purchases - логика работы,"*Figma:* [section__my-purchases|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=193:7440]","[{""id"":397483,""index"":1,""fields"":{""Action"":""screen: Showcase. section__my-purchases - логика работы"",""Data"":"""",""Expected Result"":""!screen_showcase__section__my_purchases.png|width\u003d600!""},""attachments"":[],""testVersionId"":92820}]"
SURFQA-2807,365084,screen: Showcase - компоновка,"*Figma:* [screen: Showcase|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-1117&t=VpIXRrqDHxZ0FLwp-4&node-id=1:20695]","[{""id"":397482,""index"":1,""fields"":{""Action"":""screen: Showcase - компоновка"",""Data"":"""",""Expected Result"":""!screen_showcase.png|width\u003d600!""},""attachments"":[],""testVersionId"":92819}]"

```

Правила:
* Обязательно сохрани наименования файлов, которые прикреплены к тестам
* Обязательно сохрани ссылки на figma, которые прикреплены к тестам

Сгенерируй единый JSON-файл с массивом объектов.
Каждый объект обязан соответствовать схеме TestCase (см. ниже) и описывать один тест.
Порядок полей внутри объекта не важен, но все поля из секции required должны присутствовать.
Не оборачивай результат в Markdown, выводи чистый JSON.

```yaml
openapi: 3.1.0
info:
  title: Test Case API
  version: 1.0.0
  description: Schema for encapsulating information about a single test case.

components:
  schemas:
    TestCase:
      type: object
      description: Represents a single test case with its details and steps.
      required: # Properties that MUST be present
        - labels
        - summary
        - estimate
        - testRepositoryPath
        - testCaseType
        - steps
      properties:
        testCaseIdentifier:
          type: ['string', 'null']
          description: An ID of Jira test from design tests when test is derived from it
          nullable: true
          example: "SURFQA-2807"
        labels:
          type: array
          description: A list of tags or categories for the test case. Use empty list of none
          items:
            type: string
          example: [ "authentication", "critical", "regression" ]
        summary:
          type: ['string', 'null']
          description: A concise, one-line summary of the test case's purpose.
          example: "Verify successful user login with valid credentials."
        description:
          type: string
          description: Detailed explanation of the test case's scope and context.
          nullable: true # Indicates that this field can be null or omitted
          example: "This test validates user login via standard credentials."
        estimate:
          type: integer
          format: int32 # Common integer format (e.g., for minutes)
          description: Estimated time to execute the test case, in minutes.
          minimum: 0 # An estimate can be 0 or more
          example: 5
        testRepositoryPath:
          type: string
          description: The hierarchical path where this test case is stored in a test management system (e.g., folder structure). Has to use lowercase
          example: "authentication/login"
        testCaseType:
          type: string
          description: The classification of the test case, based on its scope.
          enum:
            - component # Tests a specific isolated component or unit
            - scenario  # Tests an end-to-end user flow or a larger business scenario
          example: scenario # Example value conforming to the enum
        steps:
          type: array
          description: An ordered list of individual steps required to execute the test case.
          minItems: 1 # A test case should have at least one step
          items:
            type: object
            description: A single step within the test case, detailing action, data, and expected result.
            required:
              - action
              - data
              - result
            properties:
              action:
                type: string
                description: The action to be performed in this step.
                example: "Navigate to the application's login page."
              data:
                type: string
                description: Any specific data or inputs required for the action (e.g., input values, URLs). Use "" if none.
                example: "URL: https://example.com/login"
              result:
                type: string
                description: The expected outcome or observation after performing the action.
                example: "The login page is displayed correctly."
```

Общие правила:
* summary ≤100 символов, императивно.
* testCaseIdentifier используй только из тестов из Figma (для маппинга), иначе оставь null
* description: контекст, ID требований, часть требований, которые покрываются данной проверкой, ссылка на Figma, наименование файла из tests_from_figma
* priority: Blocker|Critical|Normal|Minor.
* labels: (Functional, Regression, Performance, StatePath, Boundary, DecisionTable, ErrorGuessing и т.д.).
* steps: action и result должны быть непустыми строками
* estimate — integer, минуты.
* testCaseType: component
* testRepositoryPath: имя фичи в нижнем регистре

ВАЖНО:
* Внимательно следи за синтаксисом, результатом должен быть валидный массив json объектов в соответствии со схемой
* Если внутри json нужны кавычки (например название кнопки), используй одиночные кавычки (')
* Для monospace вместо `` используй {{<text>}}, но будь внимателен с дальнейшими фигурными скобками
* Для блоков кода (если нужны) используй {code}<code>{code} конструкцию, но будь внимателен с дальнейшими фигурными скобками

1. Отправка запроса:
   * Позитивные проверки (корректный запрос - успешный ответ - отображение данных согласно ТЗ). Добавляй наименование запроса и моделей из Swagger
   * Ошибка/таймаут/offline в одном сценарии (негативные проверки + отсутствие сети). Добавляй наименование запроса и моделей из Swagger
   * Примеры названий:
     * Фича. Экран/шторка/TUP - запрос
     * Фича – запрос (для одноэкранных фич)

2. Пагинация:
   * Два сценария: успешная догрузка и ошибка/offline. Добавляй наименование запроса и моделей из Swagger
   * Названия:
     * Фича. Название экрана – пагинированный запрос
     * Фича. Название экрана – пагинированный запрос, ошибка

3. PTR:
   * Два сценария: PTR и PTR, ошибка. Добавляй наименование запроса и моделей из Swagger
   * Названия аналогично пагинации.

4. SPEC Кэш:
   * Несколько сценариев: с кэшем, без кэша, с кэшем ошибка, без кэша ошибка.
   * Названия:
     * Фича. Экран – запрос, с/без кэша
     * Фича. Экран – запрос, с/без кэша, ошибка

5. Логика стеков экранов:
   * Сохранение/очистка данных при переходе/возврате.
   * Сворачивание приложения - сохранение состояния.
   * Название:
     * Фича – логика работы в стеке экранов

6. Компоновка:
   * Проверка layout в состояниях: заполненное, Empty State, Error State, No Connection.
   * Отдельно для каждого экрана/шторки/TUP.
   * Названия:
     * Фича. Экран – компоновка
     * Фича. Экран. Error State – компоновка
     * Фича. Экран. Empty State – компоновка
     * Фича. Экран. No Connection – компоновка

7. Элемент (поле, чек-бокс, радиобаттон, карусель и т.п.). Используй техники тест-дизайна:
   a) Позитивные проверки + логика работы:
   * Фича. Элемент – позитивные проверки
   * Фича. Экран/шторка. Элемент – позитивные
     b) Логика работы (например, маска, валидация, автоскролл):
   * Фича. Элемент – логика работы
     c) Негативные проверки:
   * Фича. Элемент – негативные проверки
   * Фича. Экран/шторка. Элемент – негативные

Дополнительно:
* Для каждого бизнес-требования ≥1 позитивный и ≥1 негативный тест.
* Точки входа фич покрываются переходами в других фичах, не дублируй.
* Не тестировать “логика работы” поля отдельно, если она уже покрыта позитивным тестом.
* Без “инициализации” и “действия с ошибкой” в названиях — используй конкретные названия операций (напр. “запрос на верификацию”, “вход по номеру телефона”).
