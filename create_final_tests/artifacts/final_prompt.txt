Пожалуйста, на основании артефактов ниже, сгенерируй тесты на фичу Поиск

### 1. Бизнес-требования (req_showcase)
Описание логики с точными названиями фич, секций и экранов из Figma.
Содержимое файла `req_showcase.md`:
```markdown
../../../rigla-demo-specification/00 — ОБЩЕЕ/
├── Секции/
│   ├── section__ads-banners.md
│   ├── section__bonuses.md
│   ├── section__catalog.md
│   ├── section__my-purchases.md
│   └── section__symptoms.md
└── Термины и сокращения.md

../../../rigla-demo-specification/01 — ГЛАВНАЯ/
├── Mobile — Витрина 3.md
└── Mobile — Главная 3.md



<file path="../../../rigla-demo-specification/00 — ОБЩЕЕ/Секции/section__ads-banners.md">
---
order: 2
title: section__ads-banners
---

## Входные параметры

| Название | Тип данных | Обязательность | Описание                               |
|----------|------------|----------------|----------------------------------------|
| model    | object     | \+             | С какого объекта в ответе брать данные |

## Поведение

Горизонтальный слайдер с баннерами. Поддерживает автопрокрутку и обработку переходов по ссылкам. Количество баннеров определяется количеством элементов массива banners.

Последний баннер циклически переходит к первому.

## Компоновка

**\- Figma Link:** <https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=5-3285&t=AflWBiBGDB4WD9Jh-0>

\- **Swagger Model:** model

**\- Mapping:**

1. Баннер = imageUrl

**\- User Action:**

1. Тап на \_banner -> обработать ссылку `targetUrl`
</file>


<file path="../../../rigla-demo-specification/00 — ОБЩЕЕ/Секции/section__bonuses.md">
---
order: 2
title: section__bonuses
---
## Входные параметры

| Название | Тип данных | Обязательность | Описание                               |
| -------- | ---------- | -------------- | -------------------------------------- |
| state    | string     | +              | Состояние сексции бонусов              |
| model    | object     | +              | С какого объекта в ответе брать данные |

## Поведение

| state=has bonuses                                                                                | state=no bonuses                                                                                             | state=not authorized                                                                                                   |
| ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------- |
| Отображается общее количество бонусов и ближайшие к сгоранию. Есть возможность перейти к QR коду | Отображается 0 бонусов и текст, в котором предлагается совершать покупки. Есть возможность перейти к QR коду | Никакие бонусы не отображаются и текст, в котором предлагается авторизоваться. Есть возможность перейти на авторизацию |

## Компоновка
**\- Figma Link:** 

| state=has bonuses                                                                                 | state=no bonuses                                                                                   | state=not authorized                                                                               |
| ------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |
| https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=11-3410&t=7qQzTu7UGOcvBY7H-4 | https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=193-4934&t=7qQzTu7UGOcvBY7H-4 | https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=193-4877&t=7qQzTu7UGOcvBY7H-4 |


\- **Swagger Model:** model

**\- Mapping:**
1. bonuses (state=has bonuses)
	1. number
		1. bonus-count = `total`
		2. logo-rigla = согласно дизайна
	2. item
		1. fire = согласно дизайна
		2. subtitle = `expiring + "бонусов сгорят" + expiresAt`
	3. pay-code-one = согласно дизайна
2. bonuses (state=no bonuses)
	1. number
		1. bonus-count = `total`
		2. logo-rigla = согласно дизайна
	2. subtitle = "Совершайте покупки, и копите бонусы"
	3. pay-code-one = согласно дизайна
3. bonuses (state=not authorized)
	1. title = "Авторизуйтесь, чтобы получать бонусы"
	2. logo-rigla = согласно дизайна


**\- User Action:**
1. По тапу на number -> переход к экрану "Детализация бонусов" (TODO: Ссылка на экран)
2. По тапу на pay-code-one -> переход к экрану QR код (TODO: Ссылка на экран)
3. По тапу на bonuses (state=not authorized) -> переход к экрану Авторизация (TODO: Ссылка на экран)
</file>


<file path="../../../rigla-demo-specification/00 — ОБЩЕЕ/Секции/section__catalog.md">
---
order: 1.5
title: section__catalog
---

## Входные параметры

| Название | Тип данных | Обязательность | Описание                               |
|----------|------------|----------------|----------------------------------------|
| state    | string     | \+             | Тип товарного листинга                 |
| name     | string     | \+             | Название товарного листинга            |
| model    | object     | \+             | С какого объекта в ответе брать данные |

## Поведение

| state = scroll-catalog                                                                                               | state = catalog                                                          | state = small-catalog                                                      |
| -------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------ | -------------------------------------------------------------------------- |
| Карточки товаров выполнены как не зацикленный горизонтальный слайдер<br><br>Можно пролистывать свайповм вправо/влево | Карточки товаров по два в строку расположены вертикально друг под другом | Карточки товаров по одной в строку расположены вертикально друг под другом |

## Компоновка

**\- Figma Link:**

| state = scroll-catalog                                                                              | state = catalog                                                                                     | state = small-catalog                                                                               |
|-----------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------|
| <https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-18974&t=6FjzpWxr2D0ob3hF-0> | <https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-18974&t=6FjzpWxr2D0ob3hF-0> | <https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=1-18974&t=6FjzpWxr2D0ob3hF-0> |

\- **Swagger Model:** model

**\- Mapping:**

1. headline = `name`
2. product_card (state = scroll-catalog или state = catalog)
   3. image = `imageUrl`
   4. info.text = `name`
   5. rate = `rating`
   6. Отзывы =  `reviewsCount`
   7. price
      1. Если `oldPrice` > 0 -> отображаем две цены
         1. Перечеркнутая = `oldPrice`
         2. Неперечеркнутая = `price`
      2. Если `oldPrice` = 0 -> отображаем одну цену
         1. Неперечеркнутая = `price`
   8. Кнопка «Избранное» ([[#^53c5b2|favourites]])
   9. Кнопка «Добавить в корзину» ([[#^3e6fcb|add-button]])
10. product_card (для state = small-catalog)
   11. image = `imageUrl`
   12. info.text = `name`
   13. price = `price`
   14. Кнопка «Добавить в корзину» ([[#^3e6fcb|add-button]])

**\- User Action:**
1. Тап на кнопку favourites
   2. Если не активна -> отправить запрос PUT /products/\{productId}/favorite  ^53c5b2
      1. Загрузка -> ничего
      2. Успех -> активировать кнопку
      3. Ошибка -> ничего
   3. Если активна -> отправить запрос DELETE /products/\{productId}/favorite
      1. Загрузка -> ничего
      2. Успех -> деактивировать кнопку
      3. Ошибка -> ничего
4. Тап на кнопку add-button
   5. Отправить запрос POST /cart/items ^3e6fcb
      1. Загрузка -> ничего
      2. Успех -> ничего
      3. Ошибка -> ничего
6. Тап на product-card -> открыть [[Mobile — Товар|деталку товара]]
</file>


<file path="../../../rigla-demo-specification/00 — ОБЩЕЕ/Секции/section__my-purchases.md">
---
order: 1.8
title: section__my-purchases
---

## Входные параметры

| Название | Тип данных | Обязательность | Описание                               |
|----------|------------|----------------|----------------------------------------|
| scroll   | string     | \+             | Тип товарного листинга                 |
| name     | string     | \+             | Название товарного листинга            |
| model    | object     | \+             | С какого объекта в ответе брать данные |

## Компоновка

**Состояния**

| scroll = on                                                                                          | scroll = off                                                                                         |
|------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|
| <https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=193-5851&t=AflWBiBGDB4WD9Jh-0> | <https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=193-5851&t=AflWBiBGDB4WD9Jh-0> |

\- **Swagger Model:** model

**\- Mapping:**

1. headline = `name`

2. product_card

   1. image = `imageUrl`

   2. Кнопка «Добавить в корзину» (add-button)

**\- User Action:**

1. Тап на кнопку add-button

   1. Отправить запрос POST /cart/items

      1. Загрузка -> ничего

      2. Успех -> ничего

      3. Ошибка -> ничего

2. Тап на product-card -> открыть [деталку товара](./../product/mobile-product)
</file>


<file path="../../../rigla-demo-specification/00 — ОБЩЕЕ/Секции/section__symptoms.md">
## Входные параметры

| Название | Тип данных | Обязательность | Описание                             |
| -------- | ---------- | -------------- | ------------------------------------ |
| scroll   | string     | +              | Тип списка симптомов                 |
| model    | object     | \+             | Наименование симптома вместе с emoji |

## Поведение

| scroll=on                                                                                                          | scroll=off                                                                     |
| ------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------ |
| Две строки симптом выполнены как не зацикленный горизонтальный слайдер<br>Можно пролистывать свайповм вправо/влево | Карточки симптомов по два-три в строку расположены вертикально друг под другом |

## Компоновка

\- **Figma Link:**

| scroll=on                                                                                        | scroll=off                                                                                        |
| ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------- |
| https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=4-5261&t=7qQzTu7UGOcvBY7H-4 | https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=24-3575&t=7qQzTu7UGOcvBY7H-4 |
\- **Swagger Model:** model

\- **Mapping:**

1. heading = "Частые симптомы"
2. chips
	1. single-symptom
		1. title = `emoji + label`
			1. Если `label` in ("", null) -> single-symptom не отображаем

\- **User Action:**
1. По тапу на single-symptom -> Открытие состояния Search Done [Поиска](obsidian://open?vault=rigla-demo-specification&file=02%20%E2%80%94%20%D0%9A%D0%90%D0%A2%D0%90%D0%9B%D0%9E%D0%93%2FMobile%20%E2%80%94%20%D0%9F%D0%BE%D0%B8%D1%81%D0%BA), вызов `GET /products?searchQuery={SymptomTag.label}`
</file>


<file path="../../../rigla-demo-specification/00 — ОБЩЕЕ/Термины и сокращения.md">
**АЗ** — авторизованная зона.

**НАЗ** — не авторизованная зона.
</file>


<file path="../../../rigla-demo-specification/01 — ГЛАВНАЯ/Mobile — Витрина 3.md">
# Аннотация

Bottom Sheet Витрина -- структурированная выдача товаров, баннеров и статей, объеденная общей темой

## Общая информация
-  Пользователь видит, название, описание и логотип витрины
## Вы покупали
-  Пользователь видит карусель товаров, если выполнены все условия
   -  Находится в авторизованной зоне
   -  Покупал товары этой витрины
-  Пользователь может
   -  Скролить карусель
   -  Перейти на товарную выдачу по тапу на кнопку "Все"
   -  Перейти в карточку товара по тапу на карточку товара
   -  Добавить товар в корзину по тапу на кнопку "Добавить", если этого товара нет в корзине
   - Изменить количество единиц товара в корзине по тапу на кнопки на степпере, если этот товар есть в корзине
## Промо-баннеры
-  Пользователю доступна карусель с баннерами
-  Пользователь может увидеть зацикленную карусель с баннерами, которые автоматически пролистываются по истечении N секунд, либо может пролистать карусель сам
-  Баннер представляет собой картинку
-  Пользователь может нажать на баннер и перейти
   -  К статье
   -  К товарной выдаче
   -  К карточке товара
   -  На лэндинг
## Аналоги
-  Пользователь видит карусель товаров
-  Пользователь может
   -  Скролить карусель
   -  Перейти на товарную выдачу по тапу на кнопку "Все"
   -  Перейти в карточку товара по тапу на карточку товара
   -  Добавить товар в корзину по тапу на кнопку "Добавить", если этого товара нет в корзине
   - Изменить количество единиц товара в корзине по тапу на кнопки на степпере, если этот товар есть в корзине
## Карточка статьи
-  Пользователь видит на карточке
   -  Изображение
   -  Название раздела
   -  Название
   -  Короткое описание
-  Пользователь может нажать на карточку и перейти на экран статьи
## Вы смотрели
-  Пользователь видит список товаров, если у него есть история просмотра
-  Пользователь может
   -  Перейти на товарную выдачу по тапу на кнопку "Все"
   -  Перейти в карточку товара по тапу на карточку товара
   -  Добавить товар в корзину по тапу на кнопку "Добавить", если этого товара нет в корзине
   - Изменить количество единиц товара в корзине по тапу на кнопки на степпере, если этот товар есть в корзине
## Скидки
-  Пользователь видит список товаров
-  Пользователь может
   -  Перейти на товарную выдачу по тапу на кнопку "Все"
   -  Перейти в карточку товара по тапу на карточку товара
   -  Добавить товар в корзину по тапу на кнопку "Добавить", если этого товара нет в корзине
   - Изменить количество единиц товара в корзине по тапу на кнопки на степпере, если этот товар есть в корзине
# Входные параметры

| Параметр   | Тип      | Обяз. | Описание                                          |
| ---------- | -------- | ----- | ------------------------------------------------- |
| `id`       | `string` | ✅     | Уникальный идентификатор витрины                  |
| `Showcase` | `object` | ✅     | Данные из [[Mobile — Главная 3#Секция «Витрины»]] |
# Поведение

## Логика пагинации
### Условия
Когда пользователь пролистывает первые 6 товаров из пачки в [[#Секция «Скидки»]]
### Отправляемые запросы
| Запрос                           | Метод в коде | Секция где используется |
| -------------------------------- | ------------ | ----------------------- |
| `GET /recommendations/showcases` | TODO         | [[#Секция «Скидки»]]    |
### Обработка запроса
1. 🔄 **Загрузка** → Показать [[#🔄 Состояние «Загрузка»]]
2. ⚠️ **Ошибка** → Показать [[#⚠️ Состояние «Ошибка»]]
3. ❇️ **Успех** → отобразить полученные товары в [[#Секция «Скидки»]]

## Лейаут

### ❇️ Состояние «Данные»

#### Секция «Общая информация»
- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Логика секции:** нет
#### Секция «Вы покупали»
- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Логика секции:** [[section__my-purchases]] (scroll = on, name = «Вы покупали», model = `purchasedProducts.[]`)
#### Секция «Промо-баннеры»
- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Логика секции:** [[section__ads-banners]] (model = `banners.[]`)
#### Секция «Аналоги»
- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Поведение:** [[section__catalog]] (state = scroll catalog, name = «Аналоги», model = `analogProducts.[]`)
#### Секция «Карточка статьи»
- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Логика секции:**
	- **Состояния:** Состояние "данные".
	- **Действие пользователя:**
		- Тап на карточку -> переход к экрану "Статья" (TODO: ссылка на экран)
#### Секция «Вы смотрели»
- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Логика секции:** [[section__catalog]] (state = small catalog, name = «Вы смотрели», model = `watchedProducts.[]`)
#### Секция «Скидки»
- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Логика секции:** [[section__catalog]] (state = catalog, name = «Скидки», model = `discountProducts.items[]`)
## ⚠️ Состояние «Ошибка»

TODO описать состояние ошибки

## 🔄 Состояние «Загрузка»

TODO описать состояние загрузки
</file>


<file path="../../../rigla-demo-specification/01 — ГЛАВНАЯ/Mobile — Главная 3.md">
# Аннотация

Главный экран — первое, что видит авторизованный пользователь при открытии приложения.

## Адрес доставки
-  Пользователь может увидеть текущий выбранный адрес доставки.
-  Пользователь может нажать на кнопку и перейти на экран смены адреса доставки.

## Профиль
-  Пользователь в авторизованной зоне может увидеть свой аватар и индикатор при наличии непрочитанных уведомлений.
-  Пользователь вне авторизованной зоны может увидеть кнопку «Войти» и перейти на экран авторизации.

## Программа лояльности
-  Пользователю в авторизованной зоне доступна программа лояльности.
-  Пользователь может посмотреть количество оставшихся бонусов.
-  Пользователь может посмотреть количество бонусов, которые сгорают до определённой даты.
-  Пользователь может перейти к детальной информации о программе лояльности.

## Поиск
-  Пользователю доступен поиск через ввод текста и быстрый поиск через «Частые симптомы».
-  Пользователь может перейти к поиску.

## Промо-баннеры
-  Пользователю доступна карусель с баннерами.
-  Пользователь может увидеть зацикленную карусель с баннерами, которые автоматически пролистываются по истечении N секунд, либо может пролистать карусель сам.
-  Баннер представляет собой картинку.

## Витрины
-  Пользователю доступы витрины.
-  Пользователь может перейти к конкретной витрине (см. [[Mobile — Витрина]]).

# Поведение

## Логика инициализации

### Сетевые запросы к API

#### Стратегия обработки запросов

- Все запросы обрабатываются параллельно.
- Если хотя бы один из запросов завершился неуспешно, весь процесс загрузки считается неуспешным, а успешные ответы не используются.

#### Стратегия кэширования
- Для всех запросов используется единая политика ленивого отображения кэшированных данных.
- При первом открытии экрана, если ранее полученные данные доступны в кэше, отображаются данные из кэша без состояния загрузки.
- Параллельно в фоне инициируются сетевые запросы к API.
- В случае успеха — данные обновляются на экране, состояние "Данные".
- В случае ошибки — продолжаем отображать кэш, не показывая состояние ошибки.
- Данные сохраняются в кэш в виде сериализованного JSON-ответа (персистентный кэш).
 
| Запрос                           | Метод в коде | Секция где используется            |
| -------------------------------- | ------------ | ---------------------------------- |
| `GET /user/profile`              | TODO         | [[#Секция «Heading»]]              |
| `GET /user/bonuses`              | TODO         | [[#Секция «Программа лояльности»]] |
| `GET /recommendations/symptoms`  | TODO         | [[#Секция «Частые симптомы»]]      |
| `GET /banners`                   | TODO         | [[#Секция «Промо-баннеры»]]        |
| `GET /recommendations/showcases` | TODO         | [[#Секция «Витрины»]]              |

### Обработка всех запросов

1. 🔄 **Загрузка** → Показать (TODO: ссылка на участок кода)
2. ⚠️ **Ошибка** всех запросов → Показать (TODO: ссылка на участок кода)
3. ❇️ **Успех** одного или более запросов → Показать [[#❇️ Состояние «Данные»]]

### Обновление данных

#### Условия
1. Когда пользователь активирует Pull-To-Refresh на экране.

#### Действия
В фоне отправляются запросы из [[#Логика инициализации]]
1. 🔄 **Загрузка** → показываем предыдущее состояние экрана, показываем состояние загрузки Pull-To-Refresh.
2. ⚠️ **Ошибка** → показываем предыдущее состояние экрана, показываем всплывающее сообщение об ошибке.
3. ❇️ **Успех** → обновляем состояние экрана на [[#❇️ Состояние «Данные»]].

# Лейаут

## ❇️ Состояние «Данные»

### Секция «Heading»

- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Действия пользователя:** 
    1.  Тап на delivery-address -> переход к экрану "Выбор доставки" (TODO: ссылка на экран)
    2. Тап на profile → переход к экрану "Профиль" (TODO: ссылка на экран)
- **Состояния:**
    1. Состояние "данные".

### Секция «Программа лояльности»

- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Действия пользователя:**
    1. Тап на виджет -> Переход к экрану "Программа лояльности" (TODO: ссылка на экран)
- **Состояния:**
    1. Если total > 0 использовать [[section__bonuses]] (state = has bonuses, model = `Bonuses`).
    2. Если total = 0 использовать [[section__bonuses]] (state = no bonuses, model = `Bonuses`).
    3. Если пользователь в НЗ использовать [[section__bonuses]] (state = not authorized, model = `Bonuses`).

### Секция «Поиск»

- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Действия пользователя:**
    1. Тап на search -> переход к экрану [[Mobile — Поиск]]
- **Состояния:**
    1. Состояние "данные".

### Секция «Частые симптомы»

- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Действия пользователя:**
    1. TODO
- **Состояния:**
    1. Состояние "данные". [[section__symptoms]] (scroll = on, model = `SymptomTag`)

### Секция «Промо-баннеры»

- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Действия пользователя:**
    1. TODO
- **Состояния:**
    1. Состояние "данные". [[section__ads-banners]] (model = `Banner`)

### Секция «Витрины»

- **Модель данных:** TODO: ссылка на Dart-файл с реализацией модели данных
- **Реализация виджета:** TODO: ссылка на Dart-файл с реализацией виджета
- **Действия пользователя:**
    1. Тап на bs-header -> переход к экрану [[Mobile — Витрина]] (id = `id`)
- **Состояния:**
    1. TODO

## ⚠️ Состояние «Ошибка»

TODO описать состояние ошибки

## 🔄 Состояние «Загрузка»

TODO описать состояние загрузки
</file>

```

### 2. Swagger-спецификация (swagger)
Описание API, моделей и параметров запросов.
Содержимое файла `swagger.yaml`:
```yaml
openapi: 3.1.0
info:
  title: Home Page API
  version: 1.0.1
tags:
  - name: Главный экран
    description: API для получения данных для главного экрана
  - name: Товары
    description: API для операций с товарами
  - name: Корзина
    description: API для операций с корзиной
paths:
  /user/profile:
    get:
      summary: Получить профиль пользователя
      tags:
        - Главный экран
      responses:
        '200':
          description: Информация о профиле
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /user/bonuses:
    get:
      summary: Получить информацию о бонусах
      tags:
        - Главный экран
      responses:
        '200':
          description: Данные о бонусах
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bonuses'

  /recommendations/symptoms:
    get:
      summary: Получить тэги по симптомам
      tags:
        - Главный экран
      responses:
        '200':
          description: Список тэгов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SymptomTag'

  /banners:
    get:
      summary: Получить баннеры главной страницы
      tags:
        - Главный экран
      responses:
        '200':
          description: Список баннеров
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Banner'

  /recommendations/categories:
    get:
      summary: Получить блоки с рекомендациями по категориям
      tags:
        - Главный экран
      parameters:
        - in: query
          name: categoryId
          schema: { type: string }
          required: false
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
          required: false
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
          required: false
      responses:
        '200':
          description: Массив блоков витрин и данных по категориям
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /products/{productId}/favorite:
    put:
      summary: Поставить лайк (добавить в избранное)
      tags: [Товары]
      parameters:
        - name: productId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '204':
          description: Лайк поставлен

    delete:
      summary: Убрать лайк (удалить из избранного)
      tags: [Товары]
      parameters:
        - name: productId
          in: path
          required: true
          schema: 
            type: string
      responses:
        '204':
          description: Лайк удалён
  
  /cart/items:
    post:
      summary: Добавить товар в корзину
      tags: [Корзина]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productId, quantity]
              properties:
                productId: { type: string }
                quantity: { type: integer, minimum: 1 }
      responses:
        '204':
          description: Товар добавлен в корзину

  /cart/items/{productId}:
    patch:
      summary: Изменить количество товара в корзине
      description: >
        Увеличивает или уменьшает количество конкретного товара в корзине.
        Если итоговое количество становится 0 или меньше — товар удаляется.
      tags: [Корзина]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: Количество, на которое изменить (может быть отрицательным)
              required: [quantity]
      responses:
        '204':
          description: Количество товара обновлено или товар удалён
        '400':
          description: Некорректное значение количества
        '404':
          description: Товар не найден в корзине

components:
  schemas:
    UserProfile:
      type: object
      properties:
        id: { type: string }
        avatarUrl: { type: string }
        deliveryAddress:
          type: object
          properties:
            street: { type: string }
            house: { type: string }
        hasUnreadNotifications: { type: boolean }

    Bonuses:
      type: object
      properties:
        total: { type: integer }
        expiring: { type: integer }
        expiresAt: { type: string, format: date }

    SymptomTag:
      type: object
      properties:
        id: { type: string }
        label: { type: string }
        emoji: { type: string }

    Banner:
      type: object
      properties:
        id: { type: string }
        imageUrl: { type: string }
        targetUrl: { type: string }

    Category:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        icon: { type: string }
        purchasedProducts: { type: array, items: { $ref: '#/components/schemas/Product' } }
        banners: { type: array, items: { $ref: '#/components/schemas/Banner' } }
        analogProducts: { type: array, items: { $ref: '#/components/schemas/Product' } }
        blogPost: { $ref: '#/components/schemas/BlogArticle' }
        watchedProducts: { type: array, items: { $ref: '#/components/schemas/Product' } }
        discountProducts: { $ref: '#/components/schemas/ProductSectionWithPagination' }

    ProductList:
      type: object
      properties:
        products:
          type: array
          items: { $ref: '#/components/schemas/Product' }

    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        oldPrice: { type: string }
        price: { type: string }
        imageUrl: { type: string }
        rating: { type: number }
        reviewsCount: { type: number }
        discountPercent: { type: number }
        isFavorite: { type: boolean }

    ProductSectionWithPagination:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          type: object
          properties:
            offset: { type: integer }
            limit: { type: integer }
            total: { type: integer }
    
    BlogArticle:
      type: object
      properties:
        id: { type: string }
        topic: { type: string }
        title: { type: string }
        subtitle: { type: string }
        previewImageUrl: { type: string }
```

### 3. Тесты на дизайн (tests_from_figma)
Краткие сценарии с Summary, содержащие названия секций/экранов из Figma.
Содержимое файла `tests_from_figma.csv`:
```csv
TestCaseIdentifier;Summary;Description;Priority;Labels;Action;Data;ExpectedResult;Board;testRepositoryPath;testCaseType
screen_showcase_layout;screen: Showcase - компоновка;*Figma:* [screen: Showcase|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=1:20695];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase - компоновка;;!screen_showcase.png|width=600!;QA;screen: Showcase;component
screen_showcase__section__my_purchases_logic;screen: Showcase. section__my-purchases - логика работы;*Figma:* [section__my-purchases|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=193:7440];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase. section__my-purchases - логика работы;;!screen_showcase__section__my_purchases.png|width=600!;QA;screen: Showcase/section__my-purchases;component
screen_showcase__section__ads_banners_logic;screen: Showcase. section__ads-banners - логика работы;*Figma:* [section__ads-banners|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=5:3286];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase. section__ads-banners - логика работы;;!screen_showcase__section__ads_banners.png|width=600!;QA;screen: Showcase/section__ads-banners;component
screen_showcase__section__catalog_logic;screen: Showcase. section__catalog - логика работы;*Figma:* [section__catalog|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=193:17254];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase. section__catalog - логика работы;;!screen_showcase__section__catalog.png|width=600!;QA;screen: Showcase/section__catalog;component
screen_showcase__section__link_banner_logic;screen: Showcase. section__link-banner - логика работы;*Figma:* [section__link-banner|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=5:3564];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase. section__link-banner - логика работы;;!screen_showcase__section__link_banner.png|width=600!;QA;screen: Showcase/section__link-banner;component
screen_showcase__02_section__catalog_logic;screen: Showcase. section__catalog - логика работы;*Figma:* [section__catalog|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=193:19130];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase. section__catalog - логика работы;;!screen_showcase__02_section__catalog.png|width=600!;QA;screen: Showcase/section__catalog;component
screen_showcase__03_section__catalog_logic;screen: Showcase. section__catalog - логика работы;*Figma:* [section__catalog|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=327:5914];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase. section__catalog - логика работы;;!screen_showcase__03_section__catalog.png|width=600!;QA;screen: Showcase/section__catalog;component
screen_showcase__section__tab_bar_logic;screen: Showcase. section__tab-bar - логика работы;*Figma:* [section__tab-bar|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=1:20696];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Showcase. section__tab-bar - логика работы;;!screen_showcase__section__tab_bar.png|width=600!;QA;screen: Showcase/section__tab-bar;component
screen_main_layout;screen: Main - компоновка;*Figma:* [screen: Main|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3647];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main - компоновка;;!screen_main.png|width=600!;QA;screen: Main;component
screen_main__section__header_logic;screen: Main. section__header - логика работы;*Figma:* [section__header|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3649];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main. section__header - логика работы;;!screen_main__section__header.png|width=600!;QA;screen: Main/section__header;component
screen_main__section__bonuses_logic;screen: Main. section__bonuses - логика работы;*Figma:* [section__bonuses|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3650];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main. section__bonuses - логика работы;;!screen_main__section__bonuses.png|width=600!;QA;screen: Main/section__bonuses;component
screen_main__section__search_btn_logic;screen: Main. section__search-btn - логика работы;*Figma:* [section__search-btn|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3651];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main. section__search-btn - логика работы;;!screen_main__section__search_btn.png|width=600!;QA;screen: Main/section__search-btn;component
screen_main__section__symptoms_logic;screen: Main. section__symptoms - логика работы;*Figma:* [section__symptoms|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3652];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main. section__symptoms - логика работы;;!screen_main__section__symptoms.png|width=600!;QA;screen: Main/section__symptoms;component
screen_main__section__ads_banners_logic;screen: Main. section__ads-banners - логика работы;*Figma:* [section__ads-banners|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3653];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main. section__ads-banners - логика работы;;!screen_main__section__ads_banners.png|width=600!;QA;screen: Main/section__ads-banners;component
screen_main__section__collection_logic;screen: Main. section__collection - логика работы;*Figma:* [section__collection|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3654];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main. section__collection - логика работы;;!screen_main__section__collection.png|width=600!;QA;screen: Main/section__collection;component
screen_main__section__tab_bar_logic;screen: Main. section__tab-bar - логика работы;*Figma:* [section__tab-bar|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=11:3655];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main. section__tab-bar - логика работы;;!screen_main__section__tab_bar.png|width=600!;QA;screen: Main/section__tab-bar;component
screen_main_error_layout;screen: Main-error - компоновка;*Figma:* [screen: Main-error|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=434:12423];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main-error - компоновка;;!screen_main_error.png|width=600!;QA;screen: Main-error;component
screen_main_error__section__tab_bar_logic;screen: Main-error. section__tab-bar - логика работы;*Figma:* [section__tab-bar|https://www.figma.com/design/nLDpIUh4gksHkJxWpdx5Jq/AI-Boost?node-id=0-1&node-id=434:12431];Normal;ai_boost_ui_tests,main,runid_a48f5525;screen: Main-error. section__tab-bar - логика работы;;!screen_main_error__section__tab_bar.png|width=600!;QA;screen: Main-error/section__tab-bar;component

```

Правила:
* Обязательно сохрани наименования файлов, которые прикреплены к тестам
* Обязательно сохрани ссылки на figma, которые прикреплены к тестам

Сгенерируй единый JSON-файл с массивом объектов.
Каждый объект обязан соответствовать схеме TestCase (см. ниже) и описывать один тест.
Порядок полей внутри объекта не важен, но все поля из секции required должны присутствовать.
Не оборачивай результат в Markdown, выводи чистый JSON.

```yaml
openapi: 3.1.0
info:
  title: Test Case API
  version: 1.0.0
  description: Schema for encapsulating information about a single test case.

components:
  schemas:
    TestCase:
      type: object
      description: Represents a single test case with its details and steps.
      required: # Properties that MUST be present
        - labels
        - summary
        - estimate
        - testRepositoryPath
        - testCaseType
        - steps
      properties:
        labels:
          type: array
          description: A list of tags or categories for the test case. Use empty list of none
          items:
            type: string
          example: [ "authentication", "critical", "regression" ]
        summary:
          type: ['string', 'null']
          description: A concise, one-line summary of the test case's purpose.
          example: "Verify successful user login with valid credentials."
        description:
          type: string
          description: Detailed explanation of the test case's scope and context.
          nullable: true # Indicates that this field can be null or omitted
          example: "This test validates user login via standard credentials."
        estimate:
          type: integer
          format: int32 # Common integer format (e.g., for minutes)
          description: Estimated time to execute the test case, in minutes.
          minimum: 0 # An estimate can be 0 or more
          example: 5
        testRepositoryPath:
          type: string
          description: The hierarchical path where this test case is stored in a test management system (e.g., folder structure). Has to use lowercase
          example: "authentication/login"
        testCaseType:
          type: string
          description: The classification of the test case, based on its scope.
          enum:
            - component # Tests a specific isolated component or unit
            - scenario  # Tests an end-to-end user flow or a larger business scenario
          example: scenario # Example value conforming to the enum
        steps:
          type: array
          description: An ordered list of individual steps required to execute the test case.
          minItems: 1 # A test case should have at least one step
          items:
            type: object
            description: A single step within the test case, detailing action, data, and expected result.
            required:
              - action
              - data
              - result
            properties:
              action:
                type: string
                description: The action to be performed in this step.
                example: "Navigate to the application's login page."
              data:
                type: string
                description: Any specific data or inputs required for the action (e.g., input values, URLs). Use "" if none.
                example: "URL: https://example.com/login"
              result:
                type: string
                description: The expected outcome or observation after performing the action.
                example: "The login page is displayed correctly."
```

Общие правила:
* Используй русский язык кроме непереводимых слов
* summary ≤100 символов, императивно. В конце не ставь точку
* description: контекст, ID требований, часть требований, которые покрываются данной проверкой, ссылка на Figma, наименование файла из tests_from_figma. Каждый пункт на отдельной строке списком.
* priority: Blocker|Critical|Normal|Minor.
* labels: (Functional, Regression, Performance, StatePath, Boundary, DecisionTable, ErrorGuessing и т.д.). *Обязательно слитно*
* steps: action и result должны быть непустыми строками
* estimate — integer, минуты
* testCaseType: component
* testRepositoryPath: имя фичи из документации в нижнем регистре
todo папки по принципу экранов

ВАЖНО:
* Внимательно следи за синтаксисом, результатом должен быть валидный массив json объектов в соответствии со схемой
* Если внутри json нужны кавычки (например название кнопки), используй одиночные кавычки (')
* Вместо `` (backticks) используй {{<text>}}, но будь внимателен с дальнейшими фигурными скобками
* Для блоков кода (если нужны) используй {code}<code>{code} конструкцию, но будь внимателен с дальнейшими фигурными скобками

Структура проверок:
1. Отправка запроса:
   * Позитивные проверки (корректный запрос - успешный ответ - отображение данных согласно ТЗ). Добавляй наименование запроса и моделей из Swagger
   * Ошибка/таймаут/offline в одном сценарии (негативные проверки + отсутствие сети). Добавляй наименование запроса и моделей из Swagger
   todo больше ошибок (или как-то взять специфичные типа 401)
        иногда не пишет вообще ошибки (не конкретно)
   * Примеры названий:
     * Фича. Экран/шторка/TUP - запрос
     * Фича – запрос (для одноэкранных фич)

2. Пагинация:
   * Два сценария: успешная догрузка и ошибка/offline. Добавляй наименование запроса и моделей из Swagger
   * Названия:
     * Фича. Название экрана – пагинированный запрос
     * Фича. Название экрана – пагинированный запрос, ошибка

3. PTR:
   * Два сценария: PTR и PTR, ошибка. Добавляй наименование запроса и моделей из Swagger
   * Названия аналогично пагинации.

4. Кэш:
   * Несколько сценариев: с кэшем, без кэша, с кэшем ошибка, без кэша ошибка.
   * Названия:
     * Фича. Экран – запрос, с/без кэша
     * Фича. Экран – запрос, с/без кэша, ошибка

5. Логика стеков экранов:
   * Сохранение/очистка данных при переходе/возврате.
   * Сворачивание приложения - сохранение состояния.
   * Название:
     * Фича – логика работы в стеке экранов

6. Компоновка:
   * Проверка layout в состояниях: заполненное, Empty State, Error State, No Connection.
   * Отдельно для каждого экрана/шторки/TUP.
   * Названия:
     * Фича. Экран – компоновка
     * Фича. Экран. Error State – компоновка
     * Фича. Экран. Empty State – компоновка
     * Фича. Экран. No Connection – компоновка

7. Элемент (поле, чек-бокс, радиобаттон, карусель и т.п.). Используй техники тест-дизайна:
   a) Позитивные проверки + логика работы:
   * Фича. Элемент – позитивные проверки
   * Фича. Экран/шторка. Элемент – позитивные
     b) Логика работы (например, маска, валидация, автоскролл):
   * Фича. Элемент – логика работы
     c) Негативные проверки:
   * Фича. Элемент – негативные проверки
   * Фича. Экран/шторка. Элемент – негативные


Маппинг элементов и проверок:

Дополнительно:
* Для каждого бизнес-требования ≥1 позитивный и ≥1 негативный тест.
* Точки входа фич покрываются переходами в других фичах, не дублируй.
* Не тестировать “логика работы” поля отдельно, если она уже покрыта позитивным тестом.
* Без “инициализации” и “действия с ошибкой” в названиях — используй конкретные названия операций (напр. “запрос на верификацию”, “вход по номеру телефона”).
* Раздельно тестовые шаги - строго 1 условие 1 тест 1 ОР
* Уменьшить разбивку по тестам (объединять ошибки) например проверяет компоновку хотя можно проверить в запросной/логике
* Смешивает логику и запросные проверки
* обязательно прикладывать эндпоинт с методом
* детали запросов не прикладывает - возможно нужен раздельный промптинг
* Названия сделать более железными, много выдумывает
